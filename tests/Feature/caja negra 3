import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

class TestWebPage(unittest.TestCase):

    def setUp(self):
        self.driver = webdriver.Chrome()  # Asegúrate de tener ChromeDriver en tu PATH

    def test_login_and_page_elements(self):
        driver = self.driver
        url = "http://localhost/proyectoSoftwareab/public/login"  # URL de la página de login
        driver.get(url)

        # Espera para asegurarse de que la página cargue
        time.sleep(2)

        # Función para registrar los clics y datos
        def registrar_actividad(campo, dato):
            print(f"Clic en: {campo}")
            print(f"Escribiendo: {dato}")

        # Paso 1: Completar el campo "Email"
        email = "juan.perez@dominio.com"
        campo_email = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "email"))  # El nombre del campo es "email"
        )
        campo_email.click()
        registrar_actividad("Email", email)
        campo_email.send_keys(email)

        # Paso 2: Completar el campo "Contraseña"
        contraseña = "ContraseñaSegura123!"
        campo_contraseña = driver.find_element(By.NAME, "password")  # El nombre del campo es "password"
        campo_contraseña.click()
        registrar_actividad("Contraseña", contraseña)
        campo_contraseña.send_keys(contraseña)

        # Paso 3: Hacer clic en el botón de login
        boton_login = driver.find_element(By.XPATH, "//button[@type='submit']")  # Busca el botón de submit
        boton_login.click()
        registrar_actividad("Botón Login", "Hizo clic en Login")

        # Espera para observar la acción
        time.sleep(5)

        # Paso 4: Verificar si el login fue exitoso
        try:
            mensaje_exito = driver.find_element(By.CLASS_NAME, "mensaje_exito")  # Cambia esto según el mensaje de éxito
            print("Inicio de sesión exitoso!")
        except:
            print("Hubo un error al intentar iniciar sesión.")

        # Continuar con las pruebas de caja blanca en la página de destino después del login
        self.verify_page_elements(driver)

    def verify_page_elements(self, driver):
        # Verificar el título de la página
        self.assertEqual("UContinental | Dashboard Administracion", driver.title)

        # Verificar que el usuario Juan Pérez aparece en el menú de usuario
        user_menu = driver.find_element(By.CLASS_NAME, "user-menu")
        self.assertTrue(user_menu.is_displayed())
        user_menu_link = user_menu.find_element(By.CLASS_NAME, "dropdown-toggle")
        self.assertIn("Juan Pérez", user_menu_link.text)

        # Hacer clic en el menú de usuario y luego en el botón de salida
        user_menu_link.click()
        logout_button = driver.find_element(By.CSS_SELECTOR, ".user-footer .btn")
        self.assertTrue(logout_button.is_displayed())

        # Verificar el formulario de logout (aunque esté oculto)
        logout_form = driver.find_element(By.ID, "logout-form")
        self.assertEqual("POST", logout_form.get_attribute("method").upper())
        self.assertEqual("http://localhost/proyectoSoftwareab/public/logout", logout_form.get_attribute("action"))

        # Verificar que los elementos del menú lateral están presentes
        sidebar_items = driver.find_elements(By.CSS_SELECTOR, ".nav-sidebar .nav-item")
        self.assertTrue(len(sidebar_items) > 0)

    def tearDown(self):
        self.driver.quit()

if __name__ == "__main__":
    unittest.main()
